// LogeTogo/apps/api/src/plugins/security.ts
// üõ°Ô∏è Plugin centralis√© de s√©curit√© pour Fastify

import { FastifyInstance, FastifyPluginAsync, FastifyRequest, FastifyReply } from 'fastify';
import fp from 'fastify-plugin';
import { RateLimitPluginOptions, errorResponseBuilderContext } from '@fastify/rate-limit';
import { FastifyHelmetOptions } from '@fastify/helmet';
import { FastifyJWTOptions } from '@fastify/jwt';

/**
 * üõ°Ô∏è Plugin de s√©curit√© centralis√©
 * 
 * Ce plugin configure tous les aspects de s√©curit√© de l'API :
 * - CORS (Cross-Origin Resource Sharing)
 * - Headers de s√©curit√© HTTP (Helmet)
 * - Rate limiting (protection anti-DDoS)
 * - JWT (JSON Web Tokens) pour l'authentification
 * 
 * Pourquoi centraliser la s√©curit√© ?
 * - Configuration coh√©rente sur toute l'API
 * - Facilit√© de maintenance et mise √† jour
 * - √âviter l'oubli de mesures de s√©curit√©
 * - Tests centralis√©s des politiques de s√©curit√©
 */
const securityPlugin: FastifyPluginAsync = async (fastify: FastifyInstance) => {
  
  const isDev = process.env.NODE_ENV === 'development';
  const isProd = process.env.NODE_ENV === 'production';

  // üìä Log du d√©marrage de la configuration s√©curit√©
  fastify.log.info('üõ°Ô∏è Configuration des middlewares de s√©curit√©...');

  // üåê Configuration CORS (Cross-Origin Resource Sharing)
  await fastify.register(import('@fastify/cors'), {
    /**
     * üéØ Politique CORS adapt√©e √† l'environnement
     * 
     * En d√©veloppement : Permissive pour faciliter les tests
     * En production : Restrictive pour la s√©curit√©
     */
    origin: isDev 
      ? true  // Accepte toutes les origines en dev
      : [
          'https://logetogo.tg',           // Site principal
          'https://www.logetogo.tg',       // Avec www
          'https://admin.logetogo.tg',     // Panel admin
          'https://app.logetogo.tg',       // App mobile web
        ],
    
    // üç™ Autoriser les cookies et headers d'auth
    credentials: true,
    
    // üìã Headers autoris√©s pour les requ√™tes
    allowedHeaders: [
      'Origin',
      'X-Requested-With', 
      'Content-Type',
      'Accept',
      'Authorization',
      'X-API-Key',
      'X-Request-ID',
    ],
    
    // üõ†Ô∏è M√©thodes HTTP autoris√©es
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    
    // ‚è±Ô∏è Temps de cache pour les requ√™tes preflight
    maxAge: isDev ? 300 : 86400, // 5min en dev, 24h en prod
  });

  fastify.log.info('‚úÖ CORS configur√© avec succ√®s');

  // üõ°Ô∏è Configuration Helmet (Headers de s√©curit√© HTTP)
  await fastify.register((await import('@fastify/helmet')).default, {
    /**
     * üîí Headers de s√©curit√© essentiels
     * 
     * Helmet ajoute automatiquement des headers qui prot√®gent contre :
     * - XSS (Cross-Site Scripting)
     * - CSRF (Cross-Site Request Forgery)
     * - Clickjacking
     * - MIME type sniffing
     * - Et bien d'autres attaques...
     */
    
    // üéØ Content Security Policy (CSP)
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],                          // Par d√©faut : m√™me origine
        scriptSrc: ["'self'", "'unsafe-inline'"],        // Scripts autoris√©s
        styleSrc: [                                      // Styles autoris√©s
          "'self'", 
          "'unsafe-inline'",
          'https://fonts.googleapis.com'
        ],
        fontSrc: [                                       // Polices autoris√©es
          "'self'", 
          'https://fonts.gstatic.com'
        ],
        imgSrc: [                                        // Images autoris√©es
          "'self'", 
          'data:',                                       // Images base64
          'https://*.cloudflare.com',                    // CDN Cloudflare
          'https://*.cloudinary.com',                    // Stockage images
        ],
        connectSrc: [                                    // Connexions AJAX autoris√©es
          "'self'",
          isDev ? 'http://localhost:*' : ''              // Localhost en dev uniquement
        ].filter(Boolean),
        objectSrc: ["'none'"],                           // Pas d'objects/embed
      },
      upgradeInsecureRequests: isProd
    },

    // üîí Protection contre le clickjacking
    frameguard: {
      action: 'deny',  // Interdire l'int√©gration dans des frames
    },

    // üõ°Ô∏è Protection XSS
    xssFilter: true,

    // üîç Emp√™cher le MIME type sniffing
    noSniff: true,

    // üîê Forcer HTTPS en production
    hsts: isProd ? {
      maxAge: 31536000,      // 1 an
      includeSubDomains: true,
      preload: true
    } : false,

    // üö´ Masquer les informations du serveur
    hidePoweredBy: true,
  } as FastifyHelmetOptions);

  fastify.log.info('‚úÖ Helmet (headers s√©curit√©) configur√© avec succ√®s');

  // ‚ö° Configuration Rate Limiting (Protection anti-DDoS)
  await fastify.register((await import('@fastify/rate-limit')).default, {
    /**
     * üö¶ Limitation du taux de requ√™tes
     * 
     * Prot√®ge contre :
     * - Attaques par d√©ni de service (DDoS)
     * - Brute force sur les logins
     * - Abus d'API
     * - Scraping excessif
     */
    
    // üìä Limites par fen√™tre de temps
    max: isDev ? 1000 : 100,        // 1000 req/min en dev, 100 en prod
    timeWindow: '1 minute',         // Fen√™tre glissante de 1 minute
    
    // üîë Identification des clients
    keyGenerator: (request: FastifyRequest) => {
      // Prioriser l'IP r√©elle derri√®re les proxies
      return request.headers['x-forwarded-for'] as string || 
             request.headers['x-real-ip'] as string ||
             request.ip;
    },
    
    // üìù Message d'erreur personnalis√©
    errorResponseBuilder: (request: FastifyRequest, context: errorResponseBuilderContext & { remaining?: number }) => {
      // Log de l'IP du client pour le rate limiting
      fastify.log.warn({
        ip: request.ip,
        method: request.method,
        url: request.url,
        message: 'Rate limit d√©pass√©'
      });

      return {
        code: 429,
        error: 'Too Many Requests',
        message: 'Trop de requ√™tes. Veuillez patienter avant de r√©essayer.',
        retryAfter: Math.round(context.ttl / 1000), // en secondes
        limit: context.max,
        remaining: context.remaining ?? 0,
        resetTime: new Date(Date.now() + context.ttl).toISOString(),
      };
    },
    
    // üéØ Rate limiting diff√©renci√© par route
    enableDraftSpec: true,  // Support des headers standard
    
    // üîß Configuration avanc√©e
    addHeaders: {           // Ajouter headers informatifs
      'x-ratelimit-limit': true,
      'x-ratelimit-remaining': true,
      'x-ratelimit-reset': true,
      'retry-after': true,
    },
    
    // üö´ Bypass pour certaines routes (si n√©cessaire)
    skip: (request: FastifyRequest) => {
      // Exemple : bypass pour les health checks
      return request.url === '/health' || request.url === '/api/system/health';
    },
  } as RateLimitPluginOptions);

  fastify.log.info('‚úÖ Rate limiting configur√© avec succ√®s');

  // üîê Configuration JWT (JSON Web Tokens)
  await fastify.register((await import('@fastify/jwt')).default, {
    /**
     * üé´ Configuration des tokens JWT
     * 
     * JWT permet :
     * - Authentification stateless (sans session serveur)
     * - Tokens s√©curis√©s et v√©rifiables
     * - Information utilisateur dans le token
     * - Expiration automatique
     */
    
    // üîë Cl√© secr√®te pour signer les tokens
    secret: process.env.JWT_SECRET || (() => {
      if (isProd) {
        throw new Error('JWT_SECRET est obligatoire en production !');
      }
      fastify.log.warn('‚ö†Ô∏è  Utilisation de la cl√© JWT par d√©faut (dev uniquement)');
      return 'dev-jwt-secret-32-chars-minimum-change';
    })(),
    
    // ‚öôÔ∏è Options de signature
    sign: {
      expiresIn: '24h',           // Dur√©e de vie du token
      issuer: 'logetogo-api',     // √âmetteur du token
      audience: 'logetogo-app',   // Destinataire du token
    },
    
    // üîç Options de v√©rification
    verify: {
      issuer: 'logetogo-api',
      audience: 'logetogo-app',
      
      // üéØ Fonction d'extraction personnalis√©e du token
      extractToken: (request: FastifyRequest) => {
        // 1. Header Authorization (Bearer token)
        const authHeader = request.headers.authorization;
        if (authHeader && authHeader.startsWith('Bearer ')) {
          return authHeader.substring(7);
        }
        
        // 2. Cookie (pour les apps web)
        const cookies = (request as any).cookies as Record<string, string> | undefined;
        if (cookies?.authToken) {
          return cookies.authToken;
        }
        
        // 3. Query parameter (fallback, moins s√©curis√©)
        if (isDev && request.query && typeof request.query === 'object') {
          const query = request.query as Record<string, unknown>;
          if (typeof query.token === 'string') {
            fastify.log.warn('‚ö†Ô∏è  Token envoy√© via query param (dev uniquement)');
            return query.token;
          }
        }
        
        return null;
      },
    },
    
    // üç™ Support des cookies JWT
    cookie: {
      cookieName: 'authToken',
      signed: false,              // Pas de signature cookie (JWT d√©j√† sign√©)
      secure: isProd,             // HTTPS uniquement en production
      httpOnly: true,             // Pas d'acc√®s JavaScript (s√©curit√© XSS)
      sameSite: isProd ? 'strict' : 'lax',  // Protection CSRF
      maxAge: 24 * 60 * 60 * 1000,         // 24h en millisecondes
    },
  } as FastifyJWTOptions);

  fastify.log.info('‚úÖ JWT configur√© avec succ√®s');

  // üîß D√©corateur pour faciliter l'usage des tokens
  fastify.decorate('authenticate', async function(request: FastifyRequest, reply: FastifyReply) {
    try {
      await request.jwtVerify();
    } catch (err) {
      const error = err as Error;
      fastify.log.warn({ 
        error: error.message, 
        url: request.url,
        method: request.method,
        ip: request.ip 
      }, 'Tentative d\'authentification √©chou√©e');
      
      reply.code(401).send({ 
        error: 'Non autoris√©',
        message: 'Token manquant ou invalide',
        code: 'UNAUTHORIZED'
      });
    }
  });

  // üìä Log final de succ√®s
  fastify.log.info({
    cors: '‚úÖ Configur√©',
    helmet: '‚úÖ Headers s√©curit√© actifs',
    rateLimit: `‚úÖ ${isDev ? '1000' : '100'} req/min`,
    jwt: '‚úÖ Authentification JWT pr√™te'
  }, 'üõ°Ô∏è Configuration s√©curit√© termin√©e avec succ√®s');

  // üß™ Route de test de s√©curit√© (dev uniquement)
  if (isDev) {
    fastify.get('/api/security/test', {
      schema: {
        description: 'Test des middlewares de s√©curit√© (dev uniquement)',
        tags: ['Security'],
        response: {
          200: {
            type: 'object',
            properties: {
              cors: { type: 'boolean' },
              helmet: { type: 'boolean' },
              rateLimit: { type: 'boolean' },
              jwt: { type: 'boolean' },
              headers: { type: 'object' },
              ip: { type: 'string' }
            }
          }
        }
      }
    }, async (request, reply) => {
      return {
        cors: true,
        helmet: true,
        rateLimit: true,
        jwt: true,
        headers: {
          'x-frame-options': reply.getHeader('x-frame-options'),
          'x-xss-protection': reply.getHeader('x-xss-protection'),
          'x-content-type-options': reply.getHeader('x-content-type-options'),
        },
        ip: request.ip,
        userAgent: request.headers['user-agent'],
        timestamp: new Date().toISOString()
      };
    });
  }
};

// üöÄ Export du plugin avec fastify-plugin
export default fp(securityPlugin, {
  name: 'security',
  dependencies: [], // Pas de d√©pendances, ce plugin doit √™tre charg√© en premier
});

// üè∑Ô∏è Types pour TypeScript
declare module 'fastify' {
  interface FastifyInstance {
    authenticate: (request: any, reply: any) => Promise<void>;
  }
}